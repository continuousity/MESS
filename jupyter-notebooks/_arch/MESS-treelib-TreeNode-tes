{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skbio.tree import TreeNode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'--t83'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root = TreeNode(\"t83\")\n",
    "root.ascii_art()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          /-t83-2\n",
      "         |\n",
      "-anc-t83-|          /-wat-1000\n",
      "         |         |\n",
      "         |         |--wat-2000\n",
      "          \\t83-----|\n",
      "                   |--wat-3000\n",
      "                   |\n",
      "                   |          /-wat-4600\n",
      "                    \\wat-4000|\n",
      "                              \\-wat-4700\n"
     ]
    }
   ],
   "source": [
    "root = TreeNode(\"anc-t83\")\n",
    "root.append(TreeNode(\"t83-2\"))\n",
    "newnode = TreeNode(\"t83\")\n",
    "root.append(newnode)\n",
    "t1000 = TreeNode(\"wat-1000\", length=0.1)\n",
    "newnode.append(t1000)\n",
    "newnode.append(TreeNode(\"wat-2000\", length=0.2))\n",
    "newnode.append(TreeNode(\"wat-3000\", length=0.3))\n",
    "newnode.append(TreeNode(\"wat-4000\", length=0.4))\n",
    "wat = root.find(\"wat-4000\")\n",
    "wat.append(TreeNode(\"wat-4600\"))\n",
    "wat.append(TreeNode(\"wat-4700\"))\n",
    "print(root.ascii_art())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1500;\n",
      "\n",
      "          /-t83-2\n",
      "         |\n",
      "         |                    /-1500\n",
      "         |                   |\n",
      "         |                   |--1600\n",
      "-anc-t83-|          /wat-1000|\n",
      "         |         |         |--1500\n",
      "         |         |         |\n",
      "         |         |          \\-1600\n",
      "         |         |\n",
      "          \\t83-----|--wat-2000\n",
      "                   |\n",
      "                   |--wat-3000\n",
      "                   |\n",
      "                   |          /-wat-4600\n",
      "                    \\wat-4000|\n",
      "                              \\-wat-4700\n"
     ]
    }
   ],
   "source": [
    "t1500 = TreeNode(\"1500\")\n",
    "print(t1500)\n",
    "t1600 = TreeNode(\"1600\")\n",
    "t1000.append(t1500)\n",
    "t1000.append(t1600)\n",
    "#print(t1500.ancestors())\n",
    "#root.bifurcate()\n",
    "#print(root.ascii_art())\n",
    "\n",
    "rt = t1000.root()\n",
    "print(rt.ascii_art())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wat-1000:0.1;\n",
      "\n",
      "False\n",
      "          /-t83-2\n",
      "         |\n",
      "-anc-t83-|                    /-wat-4600\n",
      "         |          /wat-4000|\n",
      "         |         |          \\-wat-4700\n",
      "          \\t83-----|\n",
      "                   |          /-wat-3000\n",
      "                    \\--------|\n",
      "                             |          /-wat-1000\n",
      "                              \\--------|\n",
      "                                        \\-wat-2000\n",
      "(t83-2,((wat-4600,wat-4700)wat-4000:0.4,(wat-3000:0.3,(wat-1000:0.1,wat-2000:0.2)))t83)anc-t83;\n",
      "\n",
      "(t83-2,((wat-4600,wat-4700)wat-4000:0.4,(wat-3000:0.3,(wat-1000:0.1,wat-2000:0.2)))t83)anc-t83;\n",
      "\n",
      "          /-t83-2\n",
      "         |\n",
      "-anc-t83-|                    /-wat-4600\n",
      "         |          /wat-4000|\n",
      "         |         |          \\-wat-4700\n",
      "          \\t83-----|\n",
      "                   |          /-wat-3000\n",
      "                    \\--------|\n",
      "                             |          /-wat-1000\n",
      "                              \\--------|\n",
      "                                        \\-wat-2000\n"
     ]
    }
   ],
   "source": [
    "wat = root.find(\"wat-1000\")\n",
    "print(wat)\n",
    "res = root.remove(wat)\n",
    "print(res)\n",
    "print(root.ascii_art())\n",
    "print(root)\n",
    "root.prune()\n",
    "print(root)\n",
    "print(root.ascii_art())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(t83-2,((wat-4600,wat-4700)wat-4000:0.4,(wat-3000:0.3,((1600,(1500,(1600,(1500,(1500,1600)))))wat-1000:0.1,wat-2000:0.2)))t83)anc-t83;\n",
      "\n",
      "          /-t83-2\n",
      "         |\n",
      "         |                    /-wat-4600\n",
      "-anc-t83-|          /wat-4000|\n",
      "         |         |          \\-wat-4700\n",
      "         |         |\n",
      "          \\t83-----|          /-wat-3000\n",
      "                   |         |\n",
      "                   |         |                    /-1600\n",
      "                   |         |          /wat-1000|\n",
      "                    \\--------|         |         |          /-1500\n",
      "                             |         |          \\--------|\n",
      "                             |         |                   |          /-1600\n",
      "                             |         |                    \\--------|\n",
      "                              \\--------|                             |          /-1500\n",
      "                                       |                              \\--------|\n",
      "                                       |                                       |          /-1500\n",
      "                                       |                                        \\--------|\n",
      "                                       |                                                  \\-1600\n",
      "                                       |\n",
      "                                        \\-wat-2000\n",
      "((wat-3000:0.3,wat-2000:0.2))anc-t83;\n",
      "\n",
      "                    /-wat-3000\n",
      "-anc-t83- /--------|\n",
      "                    \\-wat-2000\n"
     ]
    }
   ],
   "source": [
    "loc_com = [\"wat-3000\", \"wat-2000\"]\n",
    "print(root)\n",
    "root.bifurcate()\n",
    "\n",
    "print(root.ascii_art())\n",
    "tr = root.shear(loc_com)\n",
    "print(tr)\n",
    "print(tr.ascii_art())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          /-wat-1000\n",
      "         |\n",
      "         |--wat-2000\n",
      "-t83-----|\n",
      "         |--wat-3000\n",
      "         |\n",
      "         |          /-wat-4600\n",
      "          \\wat-4000|\n",
      "                    \\-wat-4700\n",
      "                    /-wat-4600\n",
      "          /wat-4000|\n",
      "         |          \\-wat-4700\n",
      "-t83-----|\n",
      "         |          /-wat-3000\n",
      "          \\--------|\n",
      "                   |          /-wat-1000\n",
      "                    \\--------|\n",
      "                              \\-wat-2000\n",
      "frozenset([frozenset(['wat-1000', 'wat-3000', 'wat-2000']), frozenset(['wat-4700', 'wat-4600']), frozenset(['wat-1000', 'wat-2000'])])\n",
      "((wat-3000:0.3,wat-2000:0.2))t83;\n",
      "\n",
      "                    /-wat-3000\n",
      "-t83----- /--------|\n",
      "                    \\-wat-2000\n"
     ]
    }
   ],
   "source": [
    "newnode2 = TreeNode(\"t83\")\n",
    "root.append(newnode)\n",
    "newnode2.append(TreeNode(\"wat-1000\", length=0.1))\n",
    "newnode2.append(TreeNode(\"wat-2000\", length=0.2))\n",
    "newnode2.append(TreeNode(\"wat-3000\", length=0.3))\n",
    "newnode2.append(TreeNode(\"wat-4000\", length=0.4))\n",
    "wat = newnode2.find(\"wat-4000\")\n",
    "wat.append(TreeNode(\"wat-4600\"))\n",
    "wat.append(TreeNode(\"wat-4700\"))\n",
    "print(newnode2.ascii_art())\n",
    "loc_com = [\"wat-3000\", \"wat-2000\"]\n",
    "#loc_com = [\"wat-4000\"]\n",
    "newnode2.bifurcate()\n",
    "\n",
    "print(newnode2.ascii_art())\n",
    "print(newnode2.subsets())\n",
    "tr = newnode2.shear(loc_com)\n",
    "print(tr)\n",
    "print(tr.ascii_art())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "set(['wat-4000', 't83', 'wat-2000', 'wat-3000', 'wat-1000', 'wat-4600', None, 'wat-4700'])\n",
      "set([<TreeNode, name: wat-3000, internal node count: 0, tips count: 0>, <TreeNode, name: unnamed, internal node count: 1, tips count: 3>, <TreeNode, name: unnamed, internal node count: 0, tips count: 2>, <TreeNode, name: wat-4600, internal node count: 0, tips count: 0>, <TreeNode, name: wat-4700, internal node count: 0, tips count: 0>, <TreeNode, name: wat-2000, internal node count: 0, tips count: 0>, <TreeNode, name: t83, internal node count: 3, tips count: 5>, <TreeNode, name: wat-1000, internal node count: 0, tips count: 0>, <TreeNode, name: wat-4000, internal node count: 0, tips count: 2>])\n"
     ]
    }
   ],
   "source": [
    "print(set([n.name for n in newnode2.preorder()]))\n",
    "print(set(newnode2.preorder()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "                    /-A\n",
      "          /--------|\n",
      "         |          \\-B\n",
      "-root----|\n",
      "         |--C\n",
      "         |\n",
      "          \\-D\n"
     ]
    }
   ],
   "source": [
    "from io import StringIO\n",
    "tree = TreeNode.read(StringIO(u\"((A, B),C, D)root;\"))\n",
    "print(tree.is_root()) # is this the root of the tree?\n",
    "print(tree.is_tip()) # is this node a tip?\n",
    "print(tree.ascii_art())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Harry\n",
      "├── Bill\n",
      "└── Jane\n",
      "    ├── Diane\n",
      "    │   ├── Mark2\n",
      "    │   └── Mary\n",
      "    │       └── Mark3\n",
      "    └── Mark\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import treelib\n",
    "from treelib import Node, Tree\n",
    "tree = Tree()\n",
    "tree.create_node(\"Harry\", \"harry\")  # root node\n",
    "tree.create_node(\"Jane\", \"jane\", parent=\"harry\")\n",
    "tree.create_node(\"Bill\", \"bill\", parent=\"harry\")\n",
    "tree.create_node(\"Diane\", \"diane\", parent=\"jane\")\n",
    "tree.create_node(\"Mary\", \"Mary\", parent=\"diane\")\n",
    "tree.create_node(\"Mark2\", \"mark2\", parent=\"diane\")\n",
    "tree.create_node(\"Mark3\", \"mark3\", parent=\"Mary\")\n",
    "tree.create_node(\"Mark\", \"mark\", parent=\"jane\")\n",
    "tree.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Node(tag=Jane, identifier=jane, data=None)\n",
      "Harry\n",
      "├── Bill\n",
      "└── Jane\n",
      "    ├── Diane\n",
      "    │   ├── Mark2\n",
      "    │   └── Mary\n",
      "    │       └── Mark3\n",
      "    └── Mark\n",
      "\n",
      "Node(tag=Mary, identifier=Mary, data=None)\n",
      "Node(tag=Mark2, identifier=mark2, data=None)\n",
      "Harry\n",
      "├── Bill\n",
      "└── Jane\n",
      "    ├── Mark\n",
      "    ├── Mark2\n",
      "    └── Mary\n",
      "        └── Mark3\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dkids = tree.children(\"diane\")\n",
    "dpar = tree.parent(\"diane\")\n",
    "print(dpar)\n",
    "tree.show()\n",
    "for kid in dkids:\n",
    "    print(kid)\n",
    "#    kid.bpointer = dpar\n",
    "    tree.move_node(kid.identifier, dpar.identifier)\n",
    "tree.remove_node(\"diane\")\n",
    "tree.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
